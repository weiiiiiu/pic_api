from cryptography import x509
from cryptography.x509.oid import NameOID
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.asymmetric import rsa
from cryptography.hazmat.primitives import serialization
from datetime import datetime, timedelta
import os

def generate_key():
    """Generate private key"""
    return rsa.generate_private_key(
        public_exponent=65537,
        key_size=2048
    )

def create_cert_name(cn, country="CN", state="", locality="", 
                    org="", org_unit="", email=""):
    """Create certificate name"""
    name_attrs = [x509.NameAttribute(NameOID.COMMON_NAME, cn)]
    
    if country:
        name_attrs.append(x509.NameAttribute(NameOID.COUNTRY_NAME, country))
    if state:
        name_attrs.append(x509.NameAttribute(NameOID.STATE_OR_PROVINCE_NAME, state))
    if locality:
        name_attrs.append(x509.NameAttribute(NameOID.LOCALITY_NAME, locality))
    if org:
        name_attrs.append(x509.NameAttribute(NameOID.ORGANIZATION_NAME, org))
    if org_unit:
        name_attrs.append(x509.NameAttribute(NameOID.ORGANIZATIONAL_UNIT_NAME, org_unit))
    if email:
        name_attrs.append(x509.NameAttribute(NameOID.EMAIL_ADDRESS, email))
    
    return x509.Name(name_attrs)

def create_certificate(subject_name, issuer_name, subject_key, issuer_key,
                      valid_days, is_ca=False, path_len=None, alt_names=None):
    """Create a certificate"""
    # 设置证书有效期
    now = datetime.utcnow()
    cert = x509.CertificateBuilder().subject_name(
        subject_name
    ).issuer_name(
        issuer_name
    ).public_key(
        subject_key.public_key()
    ).serial_number(
        x509.random_serial_number()
    ).not_valid_before(
        now
    ).not_valid_after(
        now + timedelta(days=valid_days)
    )

    # 添加扩展
    if is_ca:
        cert = cert.add_extension(
            x509.BasicConstraints(ca=True, path_length=path_len), critical=True
        ).add_extension(
            x509.KeyUsage(
                digital_signature=True,
                key_encipherment=True,
                key_cert_sign=True,
                crl_sign=True,
                content_commitment=False,
                data_encipherment=False,
                key_agreement=False,
                encipher_only=False,
                decipher_only=False
            ), critical=True
        )
    else:
        cert = cert.add_extension(
            x509.BasicConstraints(ca=False, path_length=None), critical=True
        ).add_extension(
            x509.KeyUsage(
                digital_signature=True,
                key_encipherment=True,
                key_cert_sign=False,
                crl_sign=False,
                content_commitment=False,
                data_encipherment=False,
                key_agreement=False,
                encipher_only=False,
                decipher_only=False
            ), critical=True
        ).add_extension(
            x509.ExtendedKeyUsage([
                x509.oid.ExtendedKeyUsageOID.SERVER_AUTH,
                x509.oid.ExtendedKeyUsageOID.CLIENT_AUTH,
            ]), critical=False
        )

    # 添加 SAN 扩展
    if alt_names:
        san_list = [x509.DNSName(name) for name in alt_names]
        cert = cert.add_extension(
            x509.SubjectAlternativeName(san_list),
            critical=False
        )

    # 添加 Subject Key Identifier
    cert = cert.add_extension(
        x509.SubjectKeyIdentifier.from_public_key(subject_key.public_key()),
        critical=False
    )

    # 添加 Authority Key Identifier
    issuer_public_key = issuer_key.public_key() if issuer_key else subject_key.public_key()
    cert = cert.add_extension(
        x509.AuthorityKeyIdentifier.from_issuer_public_key(issuer_public_key),
        critical=False
    )

    # 签名证书
    signing_key = issuer_key if issuer_key else subject_key
    return cert.sign(signing_key, hashes.SHA256())

def save_key_and_cert(key, cert, key_file, cert_file):
    """Save private key and certificate to files"""
    # 保存私钥
    with open(key_file, "wb") as f:
        f.write(key.private_bytes(
            encoding=serialization.Encoding.PEM,
            format=serialization.PrivateFormat.PKCS8,
            encryption_algorithm=serialization.NoEncryption()
        ))
    
    # 保存证书
    with open(cert_file, "wb") as f:
        f.write(cert.public_bytes(serialization.Encoding.PEM))

def generate_cert_chain(domain_names):
    """Generate a complete certificate chain"""
    # 创建根证书
    root_key = generate_key()
    root_name = create_cert_name("Root CA")
    root_cert = create_certificate(
        root_name, root_name, root_key, None, 5475, True, 1
    )
    
    # 创建中间证书
    intermediate_key = generate_key()
    intermediate_name = create_cert_name("Intermediate CA")
    intermediate_cert = create_certificate(
        intermediate_name, root_name, intermediate_key, root_key, 
        5475, True, 0
    )
    
    # 创建服务器证书
    server_key = generate_key()
    server_name = create_cert_name(domain_names[0])
    server_cert = create_certificate(
        server_name, intermediate_name, server_key, intermediate_key,
        5475, False, None, domain_names
    )
    
    # 创建证书目录
    if not os.path.exists('certs'):
        os.makedirs('certs')
    
    # 保存所有证书和私钥
    save_key_and_cert(root_key, root_cert, 
                      "certs/root.key", "certs/root.crt")
    save_key_and_cert(intermediate_key, intermediate_cert,
                      "certs/intermediate.key", "certs/intermediate.crt")
    save_key_and_cert(server_key, server_cert,
                      "certs/server.key", "certs/server.crt")
    
    # 创建证书链文件
    with open("certs/chain.crt", "wb") as chain_file:
        chain_file.write(server_cert.public_bytes(serialization.Encoding.PEM))
        chain_file.write(intermediate_cert.public_bytes(serialization.Encoding.PEM))

if __name__ == "__main__":
    print("请输入域名列表（多个域名用逗号分隔，例如：example.com,www.example.com,*.example.com）:")
    domains_input = input().strip()
    domain_list = [d.strip() for d in domains_input.split(',')]
    
    if not domain_list:
        print("错误：至少需要输入一个域名")
    else:
        generate_cert_chain(domain_list)
        print("\n证书链生成完成！文件保存在 certs 目录下：")
        print("- root.key: 根证书私钥")
        print("- root.crt: 根证书")
        print("- intermediate.key: 中间证书私钥")
        print("- intermediate.crt: 中间证书")
        print("- server.key: 服务器私钥")
        print("- server.crt: 服务器证书")
        print("- chain.crt: 证书链（服务器证书+中间证书）")
        print("\n包含的域名：")
        for domain in domain_list:
            print(f"- {domain}")
